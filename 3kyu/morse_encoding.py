import re
def btoi(s):
    s = s + '00000000000000000000000000000000'
    s = s[:32]
    if s[0] == '0':
        return int(s, 2)
    arr = ['1' if i == '0' else '0' for i in s]
    return -1 * (int(''.join(arr), 2) + 1)

def itob(n):
    if n > 0:
        s = '00000000000000000000000000000000' + bin(n)[2:]
        return s[-32:]
    n = -n - 1
    s = '00000000000000000000000000000000' + bin(n)[2:]
    s = s[-32:]
    arr = ['1' if i == '0' else '0' for i in s]
    return ''.join(arr)

class Morse:
    @classmethod
    def encode(self,message):
        arr = message.split(' ')
        bits = []
        for word in arr:
            bit = [Morse.alpha[ch] for ch in word]
            bits.append('000'.join(bit))
            s = '0000000'.join(bits)
            ln = len(s)
        return [btoi(s[i:i+32]) for i in range(0, ln, 32)]
    @classmethod
    def decode(self,array):
        s = ''.join([itob(i) for i in array])
        words = s.split('0000000')
        nums = {}
        ans = []
        for (k,v) in Morse.alpha.items():
            nums[v] = k
        for w in words:
            word = [nums[c] if c in nums else '' for c in w.split('000')]
            print(word)
            ans.append(''.join(word))
            print ans
        return ' '.join([i for i in ans if not re.match(r'^\s*$', i)])
    
    alpha={
        'A': '10111',
        'B': '111010101',
        'C': '11101011101',
        'D': '1110101',
        'E': '1',
        'F': '101011101',
        'G': '111011101',
        'H': '1010101',
        'I': '101',
        'J': '1011101110111',
        'K': '111010111',
        'L': '101110101',
        'M': '1110111',
        'N': '11101',
        'O': '11101110111',
        'P': '10111011101',
        'Q': '1110111010111',
        'R': '1011101',
        'S': '10101',
        'T': '111',
        'U': '1010111',
        'V': '101010111',
        'W': '101110111',
        'X': '11101010111',
        'Y': '1110101110111',
        'Z': '11101110101',
        '0': '1110111011101110111',
        '1': '10111011101110111',
        '2': '101011101110111',
        '3': '1010101110111',
        '4': '10101010111',
        '5': '101010101',
        '6': '11101010101',
        '7': '1110111010101',
        '8': '111011101110101',
        '9': '11101110111011101',
        '.': '10111010111010111',
        ',': '1110111010101110111',
        '?': '101011101110101',
        "'": '1011101110111011101',
        '!': '1110101110101110111',
        '/': '1110101011101',
        '(': '111010111011101',
        ')': '1110101110111010111',
        '&': '10111010101',
        ':': '11101110111010101',
        ';': '11101011101011101',
        '=': '1110101010111',
        '+': '1011101011101',
        '-': '111010101010111',
        '_': '10101110111010111',
        '"': '101110101011101',
        '$': '10101011101010111',
        '@': '10111011101011101',
        ' ': '0'}
